#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float rd2rd, gr2rd, bl2rd;
  float rd2gr, gr2gr, bl2gr;
  float rd2bl, gr2bl, bl2bl;
} params;


layout( // input f16 buffer rgb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer rgb
    set = 1, binding = 1
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;

  float rmix = rgb.r * params.rd2rd + rgb.g * params.gr2rd + rgb.b * params.bl2rd;
  float gmix = rgb.r * params.rd2gr + rgb.g * params.gr2gr + rgb.b * params.bl2gr;
  float bmix = rgb.r * params.rd2bl + rgb.g * params.gr2bl + rgb.b * params.bl2bl;

  imageStore(img_out, ipos, vec4(rmix, gmix, bmix, 1));
}
