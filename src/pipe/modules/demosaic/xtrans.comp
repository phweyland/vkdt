#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  uint filters;
} params;


layout( // input uint16 buffer rggb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output f16 buffer green channel only
    set = 1, binding = 1
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 opos = 3*ivec2(gl_GlobalInvocationID);
  // we are run on output res / 3, one thread works on a 3x3 block at a time
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  // x trans looks like:
  // . r . . b .
  // b . b r . r
  // . r . . b .
  // . b . . r .
  // r . r b . b
  // . b . . r .

  // 1) find out which direction to blur predominantly

  // TODO: use the 2x2 blocks surrounding our 3x3 block at the corners to
  // determine interpolated gaussian moments
  // then use these to interpolate surrounding greens for the remaining four

#if 0
  vec2 eval0, eval1, eval2, eval3;
  vec2 evec0, evec1, evec2, evec3;
    // mat2 M = mat2(Ix*Ix, Ix*Iy, Ix*Iy, Iy*Iy);
    // vec2 evecb;
    // evd2x2(eval, evec, evecb, M);
#define MAT(eval,evec,O,D)\
  {\
    float g0 = texelFetch(img_in, opos+O+ivec2(0,0), 0).r;\
    float g1 = texelFetch(img_in, opos+O+ivec2(0,D.y), 0).r;\
    float g2 = texelFetch(img_in, opos+O+ivec2(D.x,0), 0).r;\
    float Ix =   D.x*(g2 - g0);\
    float Iy = - D.y*(g1 - g0);\
    eval.x = clamp(length(50*vec2(Ix, Iy)), 1.0, 5.0);\
    evec = vec2(Ix, Iy);\
    eval.y = 1;\
  }
  MAT(eval0,evec0,ivec2(0,0),ivec2(-1,-1))
  MAT(eval1,evec1,ivec2(2,0),ivec2( 1,-1))
  MAT(eval2,evec2,ivec2(0,2),ivec2(-1, 1))
  MAT(eval3,evec3,ivec2(2,2),ivec2( 1, 1))
#undef MAT
  // now we have four covariance matrices expressing the shape of the green channels
  // in every corner of our pattern. we'll use this to interpolate the four missing edge values.
#endif

  imageStore(img_out, opos+ivec2(0, 0), vec4(vec3(texelFetch(img_in, opos+ivec2(0, 0), 0).r), 1.0));
  imageStore(img_out, opos+ivec2(2, 0), vec4(vec3(texelFetch(img_in, opos+ivec2(2, 0), 0).r), 1.0));
  imageStore(img_out, opos+ivec2(1, 1), vec4(vec3(texelFetch(img_in, opos+ivec2(1, 1), 0).r), 1.0));
  imageStore(img_out, opos+ivec2(0, 2), vec4(vec3(texelFetch(img_in, opos+ivec2(0, 2), 0).r), 1.0));
  imageStore(img_out, opos+ivec2(2, 2), vec4(vec3(texelFetch(img_in, opos+ivec2(2, 2), 0).r), 1.0));

  // interpolate covariance matrix (should really interpolate the 2nd moment)
  // iterate over all Y neighbours, for instance for c1:
  // [.]  .  [.]
  // [0]  1  [2]
  //  3  [4]  5
  // mat2 M = mat2(10, 0, 0, 1);
    // float wt = 1e-8+exp(-.5*dot(O, inverse(M) * O));
  // vec2 eval = vec2(0, 100000);
  // mat2 E = mat2(1, 0, 0, 1);
  // vec2 ev = normalize(eveca + evecb);
  // mat2 E = mat2(ev.x,  ev.y, ev.y,  -ev.x);
  // vec2 eval = .5*(evala + evalb);
#define INTER_Y(P,E,O)\
  {\
  const ivec2 off[] = {ivec2(0, 1), ivec2(-1, 0), ivec2(-1, -1), ivec2(1, 0), ivec2(1, -1)};\
  float C = 0.0;\
  float w = 0.0;\
  for(int i=0;i<5;i++) {\
    vec2 o = E*O;\
    float wt = 1e-8 + exp(-.5*dot(o, o));\
    C += wt * texelFetch(img_in, opos+P+O, 0).r;\
    w += wt;\
  }\
  C /= w;\
  imageStore(img_out, opos+P, vec4(vec3(C), 1.0));\
  }

#define MAT(P,E,O)\
  {\
    const ivec2 off[] = {ivec2(0, 1), ivec2(-1, 0), ivec2(-1, -1), ivec2(1, 0), ivec2(1, -1)};\
    int i;\
    i = 1; float g0 = texelFetch(img_in, opos+P+O, 0).r;\
    i = 2; float g1 = texelFetch(img_in, opos+P+O, 0).r;\
    i = 3; float g2 = texelFetch(img_in, opos+P+O, 0).r;\
    i = 4; float g3 = texelFetch(img_in, opos+P+O, 0).r;\
    float dx0 = .5*(g3-g1), dx1 = .5*(g2-g0);\
    float dy0 = g3-g2, dy1 = g1-g0;\
    float Ix  = dx0*dx0 + dx1*dx1;\
    float Iy  = dy0*dy0 + dy1*dy1;\
    float Ixy = dx0*dy0 + dx1*dy1;\
    Ixy = 0.0;\
    E = mat2(Ix, Ixy, Ixy, Iy);\
    E = mat2(1000*Ix/Iy, 0, 0, 1);\
  }
    // E = mat2(10000, 0, 0, 1);

  const float sharpness = 10000.0;
  mat2 E = mat2(1, 0, 0, 1);
  // MAT    (ivec2(1,0),E,ivec2( off[i].x, off[i].y))

  {
    float g0 = texelFetch(img_in, opos+ivec2(0, 0), 0).r;
    float g1 = texelFetch(img_in, opos+ivec2(0,-1), 0).r;
    float g2 = texelFetch(img_in, opos+ivec2(2, 0), 0).r;
    float g3 = texelFetch(img_in, opos+ivec2(2,-1), 0).r;
    vec2 grad = vec2((g2-g0)*(g2-g0), (g1-g0)*(g1-g0) + (g3-g2)*(g3-g2));
    grad.y = - grad.y;
    // grad = vec2(10000, 0);
    float el = length(grad);
    vec2 ev = grad / el;
    el *= sharpness;
    E = mat2(el * ev.x, -ev.y, el * ev.y, ev.x);
  }
  INTER_Y(ivec2(1,0),E,ivec2( off[i].x, off[i].y))
  {
    float g0 = texelFetch(img_in, opos+ivec2( 0, 0), 0).r;
    float g1 = texelFetch(img_in, opos+ivec2(-1, 0), 0).r;
    float g2 = texelFetch(img_in, opos+ivec2( 0, 2), 0).r;
    float g3 = texelFetch(img_in, opos+ivec2(-1, 2), 0).r;
    vec2 grad = vec2((g1-g0)*(g1-g0) + (g3-g2)*(g3-g2), (g2-g0)*(g2-g0));
    grad.y = - grad.y;
    // grad = vec2(10000, 0);
    float el = length(grad);
    vec2 ev = grad / el;
    el *= sharpness;
    E = mat2(el * ev.x, -ev.y, el * ev.y, ev.x);
  }
  INTER_Y(ivec2(0,1),E,ivec2( off[i].y, off[i].x))
  {
    float g0 = texelFetch(img_in, opos+ivec2( 2, 0), 0).r;
    float g1 = texelFetch(img_in, opos+ivec2( 3, 0), 0).r;
    float g2 = texelFetch(img_in, opos+ivec2( 2, 2), 0).r;
    float g3 = texelFetch(img_in, opos+ivec2( 3, 2), 0).r;
    vec2 grad = vec2((g1-g0)*(g1-g0) + (g3-g2)*(g3-g2), (g2-g0)*(g2-g0));
    grad.y = - grad.y;
    // grad = vec2(10000, 0);
    float el = length(grad);
    vec2 ev = grad / el;
    el *= sharpness;
    E = mat2(el * ev.x, -ev.y, el * ev.y, ev.x);
  }
  INTER_Y(ivec2(2,1),E,ivec2(-off[i].y, off[i].x))
  {
    float g0 = texelFetch(img_in, opos+ivec2(0, 2), 0).r;
    float g1 = texelFetch(img_in, opos+ivec2(0, 3), 0).r;
    float g2 = texelFetch(img_in, opos+ivec2(2, 2), 0).r;
    float g3 = texelFetch(img_in, opos+ivec2(2, 3), 0).r;
    vec2 grad = vec2((g2-g0)*(g2-g0), (g1-g0)*(g1-g0) + (g3-g2)*(g3-g2));
    grad.y = - grad.y;
    // grad = vec2(10000, 0);
    float el = length(grad);
    vec2 ev = grad / el;
    el *= sharpness;
    E = mat2(el * ev.x, -ev.y, el * ev.y, ev.x);
  }
  INTER_Y(ivec2(1,2),E,ivec2( off[i].x,-off[i].y))
#undef INTER_Y
#undef MAT


#if 0

  float c0, c1, c2, c3, c4, c5, c6, c7, c8;
  c0 = texelFetch(img_in, opos, 0).r;
  c2 = texelFetch(img_in, opos+ivec2(2, 0), 0).r;
  c4 = texelFetch(img_in, opos+ivec2(1, 1), 0).r;
  c6 = texelFetch(img_in, opos+ivec2(0, 2), 0).r;
  c8 = texelFetch(img_in, opos+ivec2(2, 2), 0).r;
  float gl = texelFetch(img_in, opos+ivec2(-2,  1), 0).r;
  float gr = texelFetch(img_in, opos+ivec2( 4,  1), 0).r;
  float gt = texelFetch(img_in, opos+ivec2( 1, -2), 0).r;
  float gb = texelFetch(img_in, opos+ivec2( 1,  4), 0).r;
  int win = 0;
  {
    // v/h seem to work well:
    float vote_h  =
        abs(c6 - c0) + abs(c8 - c2) + abs(gt - c4) + abs(gb - c4);
    float vote_v  =
        abs(c2 - c0) + abs(c8 - c6) + abs(gl - c4) + abs(gr - c4);
    // these aren't detected at all:
    float vote_d0 = 0;//2*(abs(c0 - c4) + abs(c8 - c4));
    float vote_d1 = 0;//2*(abs(c2 - c4) + abs(c6 - c4));
    float vote = vote_h;
    if(vote_v  > vote) { win = 1; vote = vote_v; }
    if(vote_d0 > vote) { win = 2; vote = vote_d0; }
    if(vote_d1 > vote) { win = 3; vote = vote_d1; }
    if(vote < 700) win = 4; // no clear winner, isotropic
  }

  float g1, g3, g5, g7;

  // 2) interpolate greens
  if(win == 0)
  { // horizontal interpolation
    c1 = (  c0 + c2)*.5;
    c3 = (3*c4 + gl  )*.25;
    c5 = (3*c4 + gr  )*.25;
    c7 = (  c6 + c8)*.5;
    // c1 = c3 = c5 = c7 = 0;
  }
  else if(win == 1)
  { // vertical
    c1 = (3*c4 + gt  )*.25;
    c3 = (  c0 + c6)*.5;
    c5 = (  c2 + c8)*.5;
    c7 = (3*c4 + gb  )*.25;
  }
  else if(win == 2)
  { // first diagonal g2 <-> g6
    c1 = .25*(c0 + 3*c4) + .25*(c2 - c4);
    c3 = .25*(c0 + 3*c4) + .25*(c6 - c4);
    c5 = .25*(c8 + 3*c4) + .25*(c2 - c4);
    c7 = .25*(c8 + 3*c4) + .25*(c6 - c4);
  }
  else if(win == 3)
  { // second diagonal g0 <-> g8
    c1 = .25*(c2 + 3*c4) + .25*(c0 - c4);
    c3 = .25*(c6 + 3*c4) + .25*(c0 - c4);
    c5 = .25*(c2 + 3*c4) + .25*(c8 - c4);
    c7 = .25*(c6 + 3*c4) + .25*(c8 - c4);
  }
  else
  { // isotropic
    c1 = (2*c0 + 3*c4 + 2*c2 + gt)/8.0;
    c3 = (2*c0 + 3*c4 + 2*c6 + gl)/8.0;
    c5 = (2*c2 + 3*c4 + 2*c8 + gr)/8.0;
    c7 = (2*c6 + 3*c4 + 2*c8 + gb)/8.0;
    //c1 = c3 = c5 = c7 = 0;
  }
#if 0
  // TODO: probably need to put this in a separate pass so we can access more greens.
  // TODO: might not be too bad for perf since we could write a green only temp buffer,
  // TODO: releasing some register pressure on the way.
  // interpolate r-g and b-g
  float t  = texelFetch(img_in, opos+ivec2(1, 0), 0).r;
  float b  = texelFetch(img_in, opos+ivec2(1, 2), 0).r;
  float l  = texelFetch(img_in, opos+ivec2(0, 1), 0).r;
  float r  = texelFetch(img_in, opos+ivec2(2, 1), 0).r;
  ivec2 pos = ivec2(gl_GlobalInvocationID);
  bool blue_top = ((pos.x + pos.y) & 1) > 0;
  if(blue_top)
  {
    // original data at four edges
    c1.b = t;
    c3.r = l;
    c5.r = r;
    c7.b = b;
    // cross in center
    c4.b = c4.g + .5*(c1.b-c1.g + c7.b-c7.g);
    c4.r = c4.g + .5*(c3.r-c3.g + c5.r-c5.g);
    // Y scheme at four edges (TODO: get green channel from there, too)
    float ex;
    ex = texelFetch(img_in, opos+ivec2( 1, -1), 0).r;
    c1.r = (2*(c1.g + .5*(c3.r-c3.g + c5.r-c5.g)) + ex)/3.0;
    ex = texelFetch(img_in, opos+ivec2( 1,  3), 0).r;
    c7.r = (2*(c7.g + .5*(c3.r-c3.g + c5.r-c5.g)) + ex)/3.0;
    ex = texelFetch(img_in, opos+ivec2(-1,  1), 0).r;
    c3.b = (2*(c3.g + .5*(c1.b-c1.g + c7.b-c7.g)) + ex)/3.0;
    ex = texelFetch(img_in, opos+ivec2( 3,  1), 0).r;
    c5.b = (2*(c5.g + .5*(c1.b-c1.g + c7.b-c7.g)) + ex)/3.0;
    // four corners:
    // TODO need to fetch more nb here from the quad!
    c0.rb = c0.g + .5*(c1.rb-c1.g + c3.rb-c3.g);
    c2.rb = c2.g + .5*(c1.rb-c1.g + c5.rb-c5.g);
    c6.rb = c6.g + .5*(c7.rb-c7.g + c3.rb-c3.g);
    c8.rb = c8.g + .5*(c7.rb-c7.g + c5.rb-c5.g);
  }
  else
  {
    c1.r = t;
    c3.b = l;
    c5.b = r;
    c7.r = b;
    c4.r = c4.g + .5*(c1.r-c1.g + c7.r-c7.g);
    c4.b = c4.g + .5*(c3.b-c3.g + c5.b-c5.g);
    float ex;
    ex = texelFetch(img_in, opos+ivec2( 1, -1), 0).r;
    c1.b = (2*(c1.g + .5*(c3.b-c3.g + c5.b-c5.g)) + ex)/3.0;
    ex = texelFetch(img_in, opos+ivec2( 1,  3), 0).r;
    c7.b = (2*(c7.g + .5*(c3.b-c3.g + c5.b-c5.g)) + ex)/3.0;
    ex = texelFetch(img_in, opos+ivec2(-1,  1), 0).r;
    c3.r = (2*(c3.g + .5*(c1.r-c1.g + c7.r-c7.g)) + ex)/3.0;
    ex = texelFetch(img_in, opos+ivec2( 3,  1), 0).r;
    c5.r = (2*(c5.g + .5*(c1.r-c1.g + c7.r-c7.g)) + ex)/3.0;
    c0.rb = c0.g + .5*(c1.rb-c1.g + c3.rb-c3.g);
    c2.rb = c2.g + .5*(c1.rb-c1.g + c5.rb-c5.g);
    c6.rb = c6.g + .5*(c7.rb-c7.g + c3.rb-c3.g);
    c8.rb = c8.g + .5*(c7.rb-c7.g + c5.rb-c5.g);
  }
#endif

  imageStore(img_out, opos+ivec2(0, 0), vec4(vec3(c0), 1.0));
  imageStore(img_out, opos+ivec2(1, 0), vec4(vec3(c1), 1.0));
  imageStore(img_out, opos+ivec2(2, 0), vec4(vec3(c2), 1.0));
  imageStore(img_out, opos+ivec2(0, 1), vec4(vec3(c3), 1.0));
  imageStore(img_out, opos+ivec2(1, 1), vec4(vec3(c4), 1.0));
  imageStore(img_out, opos+ivec2(2, 1), vec4(vec3(c5), 1.0));
  imageStore(img_out, opos+ivec2(0, 2), vec4(vec3(c6), 1.0));
  imageStore(img_out, opos+ivec2(1, 2), vec4(vec3(c7), 1.0));
  imageStore(img_out, opos+ivec2(2, 2), vec4(vec3(c8), 1.0));
#endif
}
