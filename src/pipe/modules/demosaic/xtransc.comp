#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  uint filters;
} params;


layout( // input uint16 buffer rggb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input float buffer g
    set = 1, binding = 1
) uniform sampler2D img_green;

layout( // output f16 buffer rgb
    set = 1, binding = 2
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 opos = 3*ivec2(gl_GlobalInvocationID);
  // we are run on output res / 3, one thread works on a 3x3 block at a time
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  // TODO: run a thread on a 6x3 block to avoid divergence on blue_top ?

  vec3 c0, c1, c2, c3, c4, c5, c6, c7, c8;

  // fill green channel:
  c0.g = texelFetch(img_green, opos+ivec2(0, 0), 0).r;
  c1.g = texelFetch(img_green, opos+ivec2(1, 0), 0).r;
  c2.g = texelFetch(img_green, opos+ivec2(2, 0), 0).r;
  c3.g = texelFetch(img_green, opos+ivec2(0, 1), 0).r;
  c4.g = texelFetch(img_green, opos+ivec2(1, 1), 0).r;
  c5.g = texelFetch(img_green, opos+ivec2(2, 1), 0).r;
  c6.g = texelFetch(img_green, opos+ivec2(0, 2), 0).r;
  c7.g = texelFetch(img_green, opos+ivec2(1, 2), 0).r;
  c8.g = texelFetch(img_green, opos+ivec2(2, 2), 0).r;

#if 0
  // DEBUG visualise flat green channel (and do some approx wb for the eyes)
  c0.rb = vec2(c0.g) * vec2(0.5, 0.6);
  c1.rb = vec2(c1.g) * vec2(0.5, 0.6);
  c2.rb = vec2(c2.g) * vec2(0.5, 0.6);
  c3.rb = vec2(c3.g) * vec2(0.5, 0.6);
  c4.rb = vec2(c4.g) * vec2(0.5, 0.6);
  c5.rb = vec2(c5.g) * vec2(0.5, 0.6);
  c6.rb = vec2(c6.g) * vec2(0.5, 0.6);
  c7.rb = vec2(c7.g) * vec2(0.5, 0.6);
  c8.rb = vec2(c8.g) * vec2(0.5, 0.6);
#endif

#if 1
  // interpolate r-g and b-g
  float t = texelFetch(img_in, opos+ivec2(1, 0), 0).r;
  float b = texelFetch(img_in, opos+ivec2(1, 2), 0).r;
  float l = texelFetch(img_in, opos+ivec2(0, 1), 0).r;
  float r = texelFetch(img_in, opos+ivec2(2, 1), 0).r;

  // original data at four edges
  c1.b = t;
  c3.r = l;
  c5.r = r;
  c7.b = b;
  // cross in center
  c4.b = c4.g + .5*(c1.b-c1.g + c7.b-c7.g);
  c4.r = c4.g + .5*(c3.r-c3.g + c5.r-c5.g);
  // Y scheme at four edges
  float ex, eg;
  ex = texelFetch(img_in,    opos+ivec2( 1, -1), 0).r;
  eg = texelFetch(img_green, opos+ivec2( 1, -1), 0).r;
  c1.r = c1.g + (c3.r-c3.g + c5.r-c5.g + ex-eg)/3.0;
  ex = texelFetch(img_in,    opos+ivec2( 1,  3), 0).r;
  eg = texelFetch(img_green, opos+ivec2( 1,  3), 0).r;
  c7.r = c7.g + (c3.r-c3.g + c5.r-c5.g + ex-eg)/3.0;
  ex = texelFetch(img_in,    opos+ivec2(-1,  1), 0).r;
  eg = texelFetch(img_green, opos+ivec2(-1,  1), 0).r;
  c3.b = c3.g + (c1.b-c1.g + c7.b-c7.g + ex-eg)/3.0;
  ex = texelFetch(img_in,    opos+ivec2( 3,  1), 0).r;
  eg = texelFetch(img_green, opos+ivec2( 3,  1), 0).r;
  c5.b = c5.g + (c1.b-c1.g + c7.b-c7.g + ex-eg)/3.0;
  // four corners:
  // x trans looks like:
  // . r . . b .
  // b . b r . r
  // . r . . b .
  // . b . . r .
  // r . r b . b
  // . b . . r .

  // TODO need to fetch more nb here from the quad!
  // TODO: unify code base
  // TODO: clamp to min/max of interpolants
  c0.b = 4*(c1.b-c1.g);
  ex = texelFetch(img_in,    opos+ivec2(-1,  1), 0).r;
  eg = texelFetch(img_green, opos+ivec2(-1,  1), 0).r;
  c0.b += 3*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2( 0, -2), 0).r;
  // eg = texelFetch(img_green, opos+ivec2( 0, -2), 0).r;
  // c0.b += 2*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2(-2, -1), 0).r;
  // eg = texelFetch(img_green, opos+ivec2(-2, -1), 0).r;
  // c0.b += (ex-eg);
  c0.r = 4*(c3.r-c3.g);
  ex = texelFetch(img_in,    opos+ivec2( 1, -1), 0).r;
  eg = texelFetch(img_green, opos+ivec2( 1, -1), 0).r;
  c0.r += 3*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2(-2,  0), 0).r;
  // eg = texelFetch(img_green, opos+ivec2(-2,  0), 0).r;
  // c0.r += 2*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2(-1, -2), 0).r;
  // eg = texelFetch(img_green, opos+ivec2(-1, -2), 0).r;
  // c0.r += (ex-eg);
  // c0.rb = c0.rb/10.0 + c0.g;
  c0.rb = c0.rb/7.0 + c0.g;

  c2.b = 4*(c1.b-c1.g);
  ex = texelFetch(img_in,    opos+ivec2( 3,  1), 0).r;
  eg = texelFetch(img_green, opos+ivec2( 3,  1), 0).r;
  c2.b += 3*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2( 2, -2), 0).r;
  // eg = texelFetch(img_green, opos+ivec2( 2, -2), 0).r;
  // c2.b += 2*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2( 4, -1), 0).r;
  // eg = texelFetch(img_green, opos+ivec2( 4, -1), 0).r;
  // c2.b += (ex-eg);
  c2.r = 4*(c5.r-c5.g);
  ex = texelFetch(img_in,    opos+ivec2( 1, -1), 0).r;
  eg = texelFetch(img_green, opos+ivec2( 1, -1), 0).r;
  c2.r += 3*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2( 4,  0), 0).r;
  // eg = texelFetch(img_green, opos+ivec2( 4,  0), 0).r;
  // c2.r += 2*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2( 3, -2), 0).r;
  // eg = texelFetch(img_green, opos+ivec2( 3, -2), 0).r;
  // c2.r += (ex-eg);
  // c2.rb = c2.rb/10.0 + c2.g;
  c2.rb = c2.rb/7.0 + c2.g;

  c6.b = 4*(c7.b-c7.g);
  ex = texelFetch(img_in,    opos+ivec2(-1,  1), 0).r;
  eg = texelFetch(img_green, opos+ivec2(-1,  1), 0).r;
  c6.b += 3*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2( 0,  4), 0).r;
  // eg = texelFetch(img_green, opos+ivec2( 0,  4), 0).r;
  // c6.b += 2*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2(-2,  3), 0).r;
  // eg = texelFetch(img_green, opos+ivec2(-2,  3), 0).r;
  // c6.b += (ex-eg);
  c6.r = 4*(c3.r-c3.g);
  ex = texelFetch(img_in,    opos+ivec2( 1,  3), 0).r;
  eg = texelFetch(img_green, opos+ivec2( 1,  3), 0).r;
  c6.r += 3*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2(-2,  2), 0).r;
  // eg = texelFetch(img_green, opos+ivec2(-2,  2), 0).r;
  // c6.r += 2*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2(-1,  4), 0).r;
  // eg = texelFetch(img_green, opos+ivec2(-1,  4), 0).r;
  // c6.r += (ex-eg);
  // c6.rb = c6.rb/10.0 + c6.g;
  c6.rb = c6.rb/7.0 + c6.g;

  c8.b = 4*(c7.b-c7.g);
  ex = texelFetch(img_in,    opos+ivec2( 3,  1), 0).r;
  eg = texelFetch(img_green, opos+ivec2( 3,  1), 0).r;
  c8.b += 3*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2( 2,  4), 0).r;
  // eg = texelFetch(img_green, opos+ivec2( 2,  4), 0).r;
  // c8.b += 2*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2( 4,  3), 0).r;
  // eg = texelFetch(img_green, opos+ivec2( 4,  3), 0).r;
  // c8.b += (ex-eg);
  c8.r = 4*(c5.r-c5.g);
  ex = texelFetch(img_in,    opos+ivec2( 1,  3), 0).r;
  eg = texelFetch(img_green, opos+ivec2( 1,  3), 0).r;
  c8.r += 3*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2( 4,  2), 0).r;
  // eg = texelFetch(img_green, opos+ivec2( 4,  2), 0).r;
  // c8.r += 2*(ex-eg);
  // ex = texelFetch(img_in,    opos+ivec2( 3,  4), 0).r;
  // eg = texelFetch(img_green, opos+ivec2( 3,  4), 0).r;
  // c8.r += (ex-eg);
  // c8.rb = c8.rb/10.0 + c8.g;
  c8.rb = c8.rb/7.0 + c8.g;

#if 1
  ivec2 pos = ivec2(gl_GlobalInvocationID);
  bool blue_top = ((pos.x + pos.y) & 1) > 0;
  if(!blue_top)
  {
    c0.rb = c0.br;
    c1.rb = c1.br;
    c2.rb = c2.br;
    c3.rb = c3.br;
    c4.rb = c4.br;
    c5.rb = c5.br;
    c6.rb = c6.br;
    c7.rb = c7.br;
    c8.rb = c8.br;
  }
#endif
#endif

#if 0
  // XXX DEBUG
  c0.rgb = vec3(c0.r);
  c1.rgb = vec3(c1.r);
  c2.rgb = vec3(c2.r);
  c3.rgb = vec3(c3.r);
  c4.rgb = vec3(c4.r);
  c5.rgb = vec3(c5.r);
  c6.rgb = vec3(c6.r);
  c7.rgb = vec3(c7.r);
  c8.rgb = vec3(c8.r);
#endif

  imageStore(img_out, opos+ivec2(0, 0), vec4(c0, 1.0));
  imageStore(img_out, opos+ivec2(1, 0), vec4(c1, 1.0));
  imageStore(img_out, opos+ivec2(2, 0), vec4(c2, 1.0));
  imageStore(img_out, opos+ivec2(0, 1), vec4(c3, 1.0));
  imageStore(img_out, opos+ivec2(1, 1), vec4(c4, 1.0));
  imageStore(img_out, opos+ivec2(2, 1), vec4(c5, 1.0));
  imageStore(img_out, opos+ivec2(0, 2), vec4(c6, 1.0));
  imageStore(img_out, opos+ivec2(1, 2), vec4(c7, 1.0));
  imageStore(img_out, opos+ivec2(2, 2), vec4(c8, 1.0));
}
