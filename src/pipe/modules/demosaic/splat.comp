#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  uint filters;
} params;

layout( // input buffer rggb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // input buffer rgb gaussian covariance
    set = 1, binding = 1
) uniform sampler2D img_gauss;

layout( // output buffer rgb
    set = 1, binding = 2
) uniform writeonly image2D img_out;

void
eval_gauss(
    vec4 cov, ivec2 o,
    out float col,
    out float weight)
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  ivec2 pos = opos+o;
  col = texelFetch(img_in, pos, 0).r;

  // there's a ton of heuristic in the supplemental material to [Wronski 2019],
  // might experiment with that.
  // too big eigenvalue runs into numeric limits,
  // too small eigenvalues make no sense (will show CFA pattern)
  // larger: more directional
  // smaller: larger blur
  float s = 2;//clamp(4.0 + 1000.0*sqrt(cov.z), 1, 20);
  // cov.z = clamp(cov.z, 2, 5);
  cov.z = clamp(cov.z/cov.w, 1, 20);
  cov.w = 1;//clamp(cov.w, 1, 50);
  mat2 E = mat2(s/cov.z * cov.x, -s/cov.w*cov.y,
                s/cov.z * cov.y,  s/cov.w*cov.x);
  vec2 of = E * vec2(o);
  weight = exp(-0.5*dot(of, of));
#if 0 // DEBUG: visualise gaussian splats
  if(pos.x % 10 == 0 && pos.y % 10 == 0)
    col = 1000*weight;
#endif
}

void write_xtrans(
    ivec2 o,
    float col,
    float weight,
    inout vec3 rgb,
    inout vec3 w)
{
  ivec2 pos = ivec2(gl_GlobalInvocationID)+o;
  // rgb from pattern:
  bool blue_top = ((pos.x/3 + pos.y/3) & 1) > 0;
  pos = pos - (pos/3)*3;
  if(((pos.x + pos.y) & 1) == 0)
  {
    rgb.g += col * weight;
    w.g += weight;
  }
  else if(blue_top ^^ (pos.y == 1))
  {
    rgb.b += col * weight;
    w.b += weight;
  }
  else
  {
    rgb.r += col * weight;
    w.r += weight;
  }
}

void write_bayer(
    ivec2 o,
    float col,
    float weight,
    inout vec3 rgb,
    inout vec3 w)
{
  ivec2 pos = ivec2(gl_GlobalInvocationID)+o;
  if(o == ivec2(0)) weight = 100000.0;
  col *= weight;
  if((((pos.x & 1) == 0) && ((pos.y & 1) == 1)) ||
     (((pos.x & 1) == 1) && ((pos.y & 1) == 0)))
  { // green
    rgb.g += col;
    w.g += weight;
  }
  else if(((pos.x & 1) == 0) && ((pos.y & 1) == 0))
  { // red
    rgb.r += col;
    w.r += weight;
  }
  else if(((pos.x & 1) == 1) && ((pos.y & 1) == 1))
  { // blue
    rgb.b += col;
    w.b += weight;
  }
}

void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  // x trans looks like:
  // . r . . b .
  // b . b r . r
  // . r . . b .
  // . b . . r .
  // r . r b . b
  // . b . . r .
  // so green needs a splat radius of 1, blue/red need 2
  // bayer looks like:
  // r .
  // . b
  vec3 rgb = vec3(0.0);
  vec3 w   = vec3(0.0);

  if(params.filters == 9)
  { // x-trans
    // pulling this one out of the loop goes down from 2ms -> 1.6ms on intel and
    // doesn't look much worse :/
    vec4 cov = texelFetch(img_gauss, opos/3, 0);
    // unrolling this loop manually results in a perf drop 1.6ms -> 3.3ms
    // using a larger stencil cuts perf in half..
    for(int j=-2;j<=2;j++) for(int i=-2;i<=2;i++)
    // for(int j=-3;j<=3;j++) for(int i=-3;i<=3;i++)
    {
      // vec4 cov = textureLod(img_gauss, vec2((opos+vec2(i,j))/3.0/textureSize(img_gauss, 0)), 0);
      float col, weight;
      eval_gauss(cov, ivec2(i, j), col, weight);
      write_xtrans(ivec2(i, j), col, weight, rgb, w);
    }
  }
  else
  { // bayer
#if 1
    // vec3 cov = textureLod(img_gauss, vec2(opos/2.0/textureSize(img_gauss, 0)), 0).rgb;
    vec4 cov = texelFetch(img_gauss, (opos+1)/2, 0);
    // for(int j=-2;j<=2;j++) for(int i=-2;i<=2;i++)
    for(int j=-1;j<=1;j++) for(int i=-1;i<=1;i++)
    {
      float col, weight;
      eval_gauss(cov, ivec2(i, j), col, weight);
      write_bayer(ivec2(i, j), col, weight, rgb, w);
    }
#else // DEBUG see bayer pattern
    float col = texelFetch(img_in, opos, 0).r;
    imageStore(img_out, opos, vec4(vec3(col), 1.0));
    return;
#endif
  }

  rgb /= w;

  // rgb.rgb = rgb.ggg; // XXX
  // rgb *= vec3(1.0/2.0, 1.0, 1.0/1.8);

  // TODO: the radius should be specific to colour/green and bayer/xtrans!
  // TODO: get uint16 bayer pixel in certain environment
  // TODO: get downsampled gaussian covariance (use linear interpolation!)
  // splat

  imageStore(img_out, opos, vec4(rgb, 1.0));
}
