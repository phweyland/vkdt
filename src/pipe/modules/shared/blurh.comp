#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "blur_head.glsl"

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  int idx = int(gl_GlobalInvocationID.z);
  if(any(greaterThanEqual(ipos, imageSize(img_out[idx])))) return;

  vec4 color = vec4(0);
  float wgt = 0.0f;
  for(int i=-push.step;i<=push.step;i++)
  {
    float w = exp(-i*i/(2.0*(push.step/2.0*push.step/2.0)));
    wgt += w;
    color += w * texelFetch(img_in[idx], ipos + ivec2(i, 0), 0);
  }
  color *= 1.0/wgt;
#if 0
#if 1
  vec4 c0 = texelFetch(img_in[idx], ipos + ivec2(-2*push.step, 0), 0);
  vec4 c1 = texelFetch(img_in[idx], ipos + ivec2(-1*push.step, 0), 0);
  vec4 c2 = texelFetch(img_in[idx], ipos + ivec2( 0*push.step, 0), 0);
  vec4 c3 = texelFetch(img_in[idx], ipos + ivec2( 1*push.step, 0), 0);
  vec4 c4 = texelFetch(img_in[idx], ipos + ivec2( 2*push.step, 0), 0);
  // vec4 color = (1.0/16.0)*(c0+4.0*c1+6.0*c2+4.0*c3+c4);
  vec4 color = (1.0/5.0)*(c0+c1+c2+c3+c4);
#else
  vec2 dir = vec2(0, 1);
  vec2 res = vec2(textureSize(img_in[idx], 0));
  vec2 uv = vec2(ipos * (dir+vec2(1,1))) / res;
  vec4 color = vec4(0.0);
  vec2 off1 = push.step * vec2(1.3333333333333333) * dir / res;
  color += textureLod(img_in[idx], uv, 0) * 0.29411764705882354;
  color += textureLod(img_in[idx], uv + off1, 0) * 0.35294117647058826;
  color += textureLod(img_in[idx], uv - off1, 0) * 0.35294117647058826;
#endif
#endif
  imageStore(img_out[idx], ipos, color);
}
