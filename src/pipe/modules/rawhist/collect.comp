#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float c;
  float dx;
  uint filters;
  uint black;
  uint white;
} params;

layout( // input ui16 buffer rggb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output ui32 buffer rgb
    set = 1, binding = 1, r32ui
) uniform uimage2D img_out;

// histogram counter. this runs on the input dimensions/block size
void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);

  // TODO: if filters==9
  { // x-trans
    ipos *= 3;
    if(any(greaterThanEqual(ipos, textureSize(img_in, 0)))) return;
    // look at cross of green channels
    float val0 = 65536.0*texelFetch(img_in, 3*ipos+ivec2(0,0), 0).r;
    float val1 = 65536.0*texelFetch(img_in, 3*ipos+ivec2(2,0), 0).r;
    float val2 = 65536.0*texelFetch(img_in, 3*ipos+ivec2(1,1), 0).r;
    float val3 = 65536.0*texelFetch(img_in, 3*ipos+ivec2(0,2), 0).r;
    float val4 = 65536.0*texelFetch(img_in, 3*ipos+ivec2(2,2), 0).r;
    float mean = (val0 + val1 + val2 + val3 + val4)/5.0;
    float mom2 = (val0*val0 + val1*val1 + val2*val2 + val3*val3 + val4*val4)/5.0;
    // float var = mom2 - mean*mean;
    // mean = 1100;
    // float x = imageSize(img_out).x * log2(max(1,65536.0*(mean - params.black)/(params.white - params.black))) /16.0f;
    // float x = imageSize(img_out).x * log2(max(1,(mean - params.black))) /16.0f;
    // XXX ???
#if 1 // log space
    float white = log2(params.white)/16.0f;
    float black = log2(params.black)/16.0f;
    float x = imageSize(img_out).x * ((log2(mean)/16.0f - black) / (white - black));
#else // linear
    float white = params.white;// / 2.0;
    float x = imageSize(img_out).x * (mean - params.black) / (white - params.black);
#endif
    float mc = imageAtomicAdd(img_out, ivec2(x, 0), 1);
    float m1 = imageAtomicAdd(img_out, ivec2(x, 1), uint(mean));
    float m2 = imageAtomicAdd(img_out, ivec2(x, 2), uint(mom2));
    imageAtomicMin(img_out, ivec2(0, 3), uint(x));
    imageAtomicMax(img_out, ivec2(1, 3), uint(x));
    imageAtomicMax(img_out, ivec2(2, 3), uint(0));// XXX?
  }
}

