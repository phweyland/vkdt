#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float white;
  float desat;
  float soft;
} params;

layout(push_constant, std140) uniform push_t
{
  vec4 wb;
  uint filters;
  uint level;
} push;

layout( // input f16 buffer, original input at fine level
    set = 1, binding = 0
) uniform sampler2D img_input;

layout( // coarse f16 buffer
    set = 1, binding = 1
) uniform sampler2D img_coarse;

layout( // output fine resolution
    set = 1, binding = 2
) uniform writeonly image2D img_out;


vec3 gauss_expand(sampler2D img_in, ivec2 opos)
{
  vec3 c = vec3(0.0f);
  const float w[5] = {1.0f/16.0f, 4.0f/16.0f, 6.0f/16.0f, 4.0f/16.0f, 1.0f/16.0f};
  const float white = params.white;
  float wgt = 0.0f;
  ivec2 ipos = opos/2;
  const int d = (opos.x&1) + 2*(opos.y&1);
  if(d == 0)
  { // both are even, 3x3 stencil
    for(int ii=-1;ii<=1;ii++) for(int jj=-1;jj<=1;jj++)
    {
      vec3 rgb = texelFetch(img_in, ipos+ivec2(ii,jj), 0).rgb;
      if(all(lessThan(rgb, vec3(white))))
      {
        c += rgb * w[2*jj+2]*w[2*ii+2];
        wgt += w[2*jj+2]*w[2*ii+2];
      }
    }
  }
  else if(d == 1)
  { // i is odd, 2x3 stencil
    for(int ii=0;ii<=1;ii++) for(int jj=-1;jj<=1;jj++)
    {
      vec3 rgb = texelFetch(img_in, ipos+ivec2(ii,jj), 0).rgb;
      if(all(lessThan(rgb, vec3(white))))
      {
        c += rgb * w[2*jj+2]*w[2*ii+1];
        wgt += w[2*jj+2]*w[2*ii+1];
      }
    }
  }
  else if(d == 2)
  { // j is odd, 3x2 stencil
    for(int ii=-1;ii<=1;ii++) for(int jj=0;jj<=1;jj++)
    {
      vec3 rgb = texelFetch(img_in, ipos+ivec2(ii,jj), 0).rgb;
      if(all(lessThan(rgb, vec3(white))))
      {
        c += rgb * w[2*jj+1]*w[2*ii+2];
        wgt += w[2*jj+1]*w[2*ii+2];
      }
    }
  }
  else // d == 3
  { // both are odd, 2x2 stencil
    for(int ii=0;ii<=1;ii++) for(int jj=0;jj<=1;jj++)
    {
      vec3 rgb = texelFetch(img_in, ipos+ivec2(ii,jj), 0).rgb;
      if(all(lessThan(rgb, vec3(white))))
      {
        c += rgb * w[2*jj+1]*w[2*ii+1];
        wgt += w[2*jj+1]*w[2*ii+1];
      }
    }
  }
  if(wgt == 0.0) return vec3(0, 1, 1); // white?
  return c / wgt;
}

// assemble
void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(opos, imageSize(img_out)))) return;

  // upsample img_coarse
  vec3 upsm = gauss_expand(img_coarse, opos);
  // fetch input pixel
  vec3 fine = texelFetch(img_input, opos, 0).rgb;

  const float white = params.white;

#if 1
  float scale = 1.0f;
  // rescale upsampled values to match unclipped values in fine buffer
  // this is risky because min might be close to black/0 so it may be unstable:
  // guess channel by darkest blurry version
  if     (upsm.r < upsm.g && upsm.r < upsm.b)  scale = fine.r/max(0.0001, upsm.r);
  else if(upsm.g < upsm.r && upsm.g < upsm.b)  scale = fine.g/max(0.0001, upsm.g);
  else /*(upsm.b < upsm.g && upsm.b < upsm.r)*/scale = fine.b/max(0.0001, upsm.b);

  vec3 rec = upsm * scale;

  // try and only apply if we are reasonably sure it's not an edge but a gradient:
  // (i think this goes the right direction but maybe t needs to be more
  // aggressive, i.e. degenerate to the above smooth with t=1 sooner)
  float t = 0.0f;
  if(any(greaterThanEqual(fine, vec3(white)))) t = 1.0f;
  // else t = clamp(1.0-0.3*length(fine-upsm), 0, 1);
  else t = clamp(params.soft-0.3*length(fine-upsm), 0, 1);

  if(all(lessThan(upsm, vec3(white))))
    fine = mix(fine, upsm, t);
#else
  if(any(greaterThanEqual(fine, vec3(white))))
    fine = upsm; // XXX DEBUG
#endif
  imageStore(img_out, opos, vec4(fine, 1));
}

